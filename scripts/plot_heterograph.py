import argparse
from collections import defaultdict
from pathlib import Path

import matplotlib.pyplot as plt
import networkx as nx
from androguard.misc import AnalyzeAPK

from process_dataset import process_apk, HeteroGraph, APIConfig, stats


def plot_heterograph(graph: HeteroGraph, kind: str = 'fcg'):
    plt.clf()
    result = nx.DiGraph()
    edges = defaultdict(list)
    mapping = graph.mappings
    legend = ''
    for node_type, node_list in graph.nodes.items():
        for node_id in node_list:
            name = mapping[node_type][node_id]
            result.add_node(f'{node_type}_{node_id}', type=node_type, name=name)
    for edge_type, edge_list in graph.edges.items():
        for edge in edge_list:
            source_node = f'{edge_type[0]}_{edge[0]}'
            dest_node = f'{edge_type[2]}_{edge[1]}'
            type_ = edge_type[1]
            result.add_edge(source_node, dest_node, type=type_)
            edges[type_].append((source_node, dest_node))
    layout = nx.drawing.nx_agraph.graphviz_layout(result, prog='neato')
    labels, cm = {}, []
    node_list = []
    for i, node_id in enumerate(result.nodes):
        node = result.nodes[node_id]
        node_list.append(node_id)
        labels[node_id] = i
        legend += f'{i}, {node["name"]}\n'
        cm.append(
            {
                'user': 'blue',
                'api': 'yellow',
                'permission': 'orange'
            }[node['type']]
        )
    plt.axis('off')
    nx.draw_networkx_nodes(
        result,
        pos=layout,
        nodelist=node_list,
        node_size=500,
        node_color=cm,
        alpha=0.6,
    )
    nx.draw_networkx_labels(
        result,
        pos=layout,
        labels=labels,
        font_family='serif'
    )
    for edge_type, edge_list in edges.items():
        if 'rev' in edge_type:
            continue
        if 'invokes' in edge_type:
            style = 'red'
        elif 'call' in edge_type:
            style = 'magenta'
        elif 'parent' in edge_type:
            style = 'green'
        elif 'use' in edge_type:
            style = 'blue'
        else:
            style = ''
        nx.draw_networkx_edges(
            result,
            pos=layout,
            edgelist=edge_list,
            edge_color=style,
            connectionstyle='arc3, rad = 0.1',
            min_source_margin=12,
            min_target_margin=12
        )
    plt.tight_layout()
    plt.savefig(f"{kind}.pdf", dpi=300, bbox_inches="tight")
    with open(f"{kind}.table", "w") as f:
        f.write(legend)


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Draw FCG of small APKs')
    parser.add_argument(
        '-s', '--source-file',
        help='The APK file to analyze and draw FCG',
        required=True
    )
    parser.add_argument(
        '-m', '--metadata-dir',
        help='The directory pointing to metadata. Must contain api_analysis/',
        required=True
    )
    args = parser.parse_args()
    source_file = args.source_file
    if not Path(source_file).exists():
        raise FileNotFoundError(f"{args.source_file} doesn't exist")
    metadata_dir = Path(args.metadata_dir)
    if not metadata_dir.exists():
        raise FileNotFoundError(f'{metadata_dir} not found')
    api_config = APIConfig(metadata_dir)
    a, d, dx = AnalyzeAPK(source_file)
    fcg, rfcg = process_apk(dx, config=api_config)
    print(stats)
    plot_heterograph(fcg, kind='fcg')
    plot_heterograph(rfcg, kind='rfcg')

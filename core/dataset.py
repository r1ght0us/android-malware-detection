from pathlib import Path
from typing import List, Dict, Tuple, Union

import dgl
from torch.utils.data import Dataset


class MalwareDataset(Dataset):
    def __init__(
            self,
            source_dir: Union[str, Path],
            samples: List[str],
            labels: Dict[str, int],
            consider_nodes: List[str],
    ):
        self.source_dir = Path(source_dir)
        self.samples = samples
        self.labels = labels
        self.consider_nodes = consider_nodes

    def __len__(self) -> int:
        """Denotes the total number of samples"""
        return len(self.samples)

    def __getitem__(self, index: int) -> Tuple[dgl.DGLHeteroGraph, int]:
        """Generates one sample of data"""
        name = self.samples[index]
        graphs, _ = dgl.data.utils.load_graphs(str(self.source_dir / name))
        graph: dgl.DGLHeteroGraph = graphs[0]
        graph = dgl.node_type_subgraph(graph, self.consider_nodes)
        # Convert all features to float
        features = {}
        for node_type in graph.ntypes:
            features[node_type] = graph.ndata['features'][node_type].float()
        graph.ndata['features'] = features
        return graph, self.labels[name]

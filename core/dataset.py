from pathlib import Path
from typing import List, Dict, Tuple, Union

import dgl
from torch.utils.data import Dataset


class MalwareDataset(Dataset):
    def __init__(
            self,
            source_dir: Union[str, Path],
            samples: List[str],
            labels: Dict[str, int],
    ):
        self.source_dir = Path(source_dir)
        self.samples = samples
        self.labels = labels

    def __len__(self) -> int:
        """Denotes the total number of samples"""
        return len(self.samples)

    def __getitem__(self, index: int) -> Tuple[dgl.DGLHeteroGraph, int]:
        """Generates one sample of data"""
        name = self.samples[index]
        graphs, _ = dgl.data.utils.load_graphs(str(self.source_dir / name))
        graph = graphs[0]
        return graph, self.labels[name]

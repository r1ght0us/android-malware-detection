from pathlib import Path
from typing import List, Dict, Tuple, Union

import dgl
from torch.utils.data import Dataset

attributes = ['external', 'entrypoint', 'native', 'public', 'static', 'codesize']


class MalwareDataset(Dataset):
    def __init__(
            self,
            source_dir: Union[str, Path],
            samples: List[str],
            labels: Dict[str, int],
    ):
        self.source_dir = Path(source_dir)
        self.samples = samples
        self.labels = labels

    def __len__(self) -> int:
        """Denotes the total number of samples"""
        return len(self.samples)

    def _transform_names(self, graph: dgl.DGLHeteroGraph) -> dgl.DGLHeteroGraph:
        name_mapping = {
            # FCG edge mapping
            ('method', 'calls', 'method'): ('method', 'invokes', 'method'),
            ('method', 'calls', 'api_method'): ('method', 'invokes_api', 'api_method'),
            ('api_method', 'calls', 'api_method'): ('api_method', 'callback', 'api_method'),
            ('method', 'parent_of', 'method'): ('method', 'parent_of', 'method'),  # override by
            ('api_method', 'parent_of', 'method'): ('api_method', 'parent_of_user', 'method'),
            ('api_method', 'parent_of', 'api_method'): ('api_method', 'parent_of_api', 'api_method'),
            ('permission', 'used_by', 'api_method'): ('permission', 'used_by', 'api_method'),
            # RFCG edge mapping
            ('class', 'calls', 'class'): ('class', 'invokes', 'class'),
            ('class', 'calls', 'api_class'): ('class', 'invokes_api', 'api_class'),
            ('api_class', 'calls', 'api_class'): ('api_class', 'callback', 'api_class'),
            ('class', 'parent_of', 'class'): ('class', 'parent_of', 'class'),  # extends or implements
            ('api_class', 'parent_of', 'class'): ('api_class', 'parent_of_user', 'class'),
            ('api_class', 'parent_of', 'api_class'): ('api_class', 'parent_of_api', 'api_class'),
            ('permission', 'used_by', 'api_class'): ('permission', 'used_by', 'api_class'),
        }
        result_dict = {}
        for edge_type in graph.canonical_etypes:
            result_dict[name_mapping[edge_type]] = graph.all_edges(etype=edge_type)
        new_graph = dgl.heterograph(result_dict)
        new_graph.ndata['features'] = graph.ndata['features']
        return new_graph

    def __getitem__(self, index: int) -> Tuple[dgl.DGLHeteroGraph, int]:
        """Generates one sample of data"""
        name = self.samples[index]
        graphs, _ = dgl.data.utils.load_graphs(str(self.source_dir / name))
        graph = self._transform_names(graphs[0])
        return graph, self.labels[name]
